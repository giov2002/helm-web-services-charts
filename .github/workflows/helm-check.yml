name: 🚀 CI/CD Infrastructure Services

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'web-nginx/**'
      - 'monitoring/**'
      - 'web-apache/**'
      - 'bind9/**'
      - 'database/**'
      - 'mailserver/**'
      - 'roundcube/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'web-nginx/**'
      - 'monitoring/**'
      - 'web-apache/**'
      - 'bind9/**'
      - 'database/**'
      - 'mailserver/**'
      - 'roundcube/**'

env:
  REGISTRY: ghcr.io
  NAMESPACE_PREFIX: prod

jobs:
  # Job 1: Détection des services modifiés
  detect-changes:
    name: 🔍 Détection des Changements
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.changes.outputs.charts }}
      bind9: ${{ steps.changes.outputs.bind9 }}
      mysql: ${{ steps.changes.outputs.mysql }}
      phpmyadmin: ${{ steps.changes.outputs.phpmyadmin }}
      mailserver: ${{ steps.changes.outputs.mailserver }}
      monitoring: ${{ steps.changes.outputs.monitoring }}
      roundcube: ${{ steps.changes.outputs.roundcube }}
      web-apache: ${{ steps.changes.outputs.web-apache }}
      web-nginx: ${{ steps.changes.outputs.web-nginx }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Détecter les changements par service
      id: changes
      run: |
        charts_changed=""
        
        # Fonction pour détecter les changements
        check_changes() {
          local service=$1
          local path=$2
          if git diff --name-only HEAD~1 | grep -q "^${path}/"; then
            echo "${service}=true" >> $GITHUB_OUTPUT
            charts_changed="${charts_changed},${service}"
            echo "✅ Changements détectés dans: $service"
          else
            echo "${service}=false" >> $GITHUB_OUTPUT
            echo "⏸️ Aucun changement dans: $service"
          fi
        }
        
        # Vérification par service
        check_changes "bind9" "bind9"
        check_changes "mysql" "database/mysql"
        check_changes "phpmyadmin" "database/phpmyadmin"
        check_changes "mailserver" "mailserver"
        check_changes "monitoring" "monitoring"
        check_changes "roundcube" "roundcube"
        check_changes "web-apache" "web-apache"
        check_changes "web-nginx" "web-nginx"
        
        # Nettoyer la liste
        charts_changed=$(echo "$charts_changed" | sed 's/^,//')
        echo "charts=${charts_changed}" >> $GITHUB_OUTPUT
        echo "📋 Services à déployer: $charts_changed"

  # Job 2: Validation des charts modifiés
  validate-charts:
    name: 🧪 Validation des Charts
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.charts != '' }}  # Vérifie que la liste des charts n'est pas vide
    strategy:
      matrix:
        chart: ${{ fromJson('[\"' + needs.detect-changes.outputs.charts.replace(',', '","') + '\"]') }}  # Correction de format JSON
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4

    - name: ⚙️ Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: 🔍 Validation du chart ${{ matrix.chart }}
      run: |
        chart_path=""
        case "${{ matrix.chart }}" in
          "mysql") chart_path="database/mysql" ;;
          "phpmyadmin") chart_path="database/phpmyadmin" ;;
          "monitoring") chart_path="monitoring/monitoring-chart" ;;
          *) chart_path="${{ matrix.chart }}" ;;
        esac
        
        echo "🔍 Validation de: $chart_path"
        helm lint $chart_path/
        helm template test-${{ matrix.chart }} $chart_path/ --dry-run
        echo "✅ ${{ matrix.chart }} validé"

  # Job 3: Tests d'intégration avec ordre de déploiement
  integration-tests:
    name: 🔄 Tests d'Intégration
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-charts]
    if: ${{ needs.detect-changes.outputs.charts != '' }}  # Vérifie que des changements existent avant de lancer ce job
    
    steps:
    - uses: actions/checkout@v4

    - name: ⚙️ Setup Tools
      run: |
        # Helm
        curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xz
        sudo mv linux-amd64/helm /usr/local/bin/
        
        # kubectl
        curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: 🐳 Démarrer Minikube (similaire à votre env)
      uses: medyagh/setup-minikube@master
      with:
        minikube-version: 1.32.0
        kubernetes-version: 1.28.0
        driver: docker
        start-args: '--memory=4096 --cpus=2'

    - name: 🗄️ Déployer les dépendances (Base de données)
      if: ${{ needs.detect-changes.outputs.mysql == 'true' || contains(needs.detect-changes.outputs.charts, 'mailserver') || contains(needs.detect-changes.outputs.charts, 'roundcube') }}
      run: |
        echo "🗄️ Déploiement MySQL (prérequis)"
        kubectl create namespace database || true
        helm upgrade --install mysql database/mysql/ \
          --namespace database \
          --wait --timeout=300s \
          --set mysql.auth.rootPassword=testpass123
        
        # Attendre que MySQL soit complètement prêt
        kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=mysql -n database --timeout=300s
        echo "✅ MySQL opérationnel"

    - name: 🌐 Déployer les services DNS (Bind9)
      if: ${{ needs.detect-changes.outputs.bind9 == 'true' }}
      run: |
        echo "🌐 Déploiement Bind9"
        kubectl create namespace dns || true
        helm upgrade --install bind9 bind9/ \
          --namespace dns \
          --wait --timeout=180s
        echo "✅ Bind9 déployé"

    - name: 🌍 Déployer les services Web
      if: ${{ needs.detect-changes.outputs.web-nginx == 'true' || needs.detect-changes.outputs.web-apache == 'true' }}
      run: |
        kubectl create namespace web || true
        
        if [[ "${{ needs.detect-changes.outputs.web-nginx }}" == "true" ]]; then
          echo "🌍 Déploiement Nginx"
          helm upgrade --install nginx web-nginx/ \
            --namespace web \
            --wait --timeout=180s
        fi
        
        if [[ "${{ needs.detect-changes.outputs.web-apache }}" == "true" ]]; then
          echo "🌍 Déploiement Apache"
          helm upgrade --install apache web-apache/ \
            --namespace web \
            --wait --timeout=180s
        fi
        echo "✅ Services web déployés"

    - name: 📧 Déployer les services Mail
      if: ${{ needs.detect-changes.outputs.mailserver == 'true' || needs.detect-changes.outputs.roundcube == 'true' }}
      run: |
        kubectl create namespace mail || true
        
        if [[ "${{ needs.detect-changes.outputs.mailserver }}" == "true" ]]; then
          echo "📧 Déploiement Mailserver"
          helm upgrade --install mailserver mailserver/ \
            --namespace mail \
            --wait --timeout=300s
        fi
        
        if [[ "${{ needs.detect-changes.outputs.roundcube }}" == "true" ]]; then
          echo "📧 Déploiement Roundcube"
          helm upgrade --install roundcube roundcube/ \
            --namespace mail \
            --wait --timeout=180s
        fi
        echo "✅ Services mail déployés"

    - name: 📊 Déployer le Monitoring
      if: ${{ needs.detect-changes.outputs.monitoring == 'true' }}
      run: |
        echo "📊 Déploiement du Monitoring"
        kubectl create namespace monitoring || true
        helm upgrade --install monitoring monitoring/monitoring-chart/ \
          --namespace monitoring \
          --wait --timeout=300s
        echo "✅ Monitoring déployé"

    - name: 🔍 Tests de Connectivité Inter-Services
      run: |
        echo "🔍 Vérification de la connectivité"
        
        # Test MySQL (si présent)
        if kubectl get pods -n database -l app.kubernetes.io/name=mysql &>/dev/null; then
          kubectl run mysql-test --rm -i --restart=Never --image=mysql:8.0 -- \
            mysqladmin ping -h mysql.database.svc.cluster.local -u root -ptestpass123 || \
            echo "⚠️ MySQL non accessible"
        fi
        
        # Test services web
        for service in nginx apache; do
          if kubectl get svc -n web $service &>/dev/null; then
            kubectl run web-test-$service --rm -i --restart=Never --image=curlimages/curl -- \
              curl -I http://$service.web.svc.cluster.local/ || \
              echo "⚠️ $service non accessible"
          fi
        done
        
        echo "✅ Tests de connectivité terminés"

    - name: 📋 Résumé du déploiement
      run: |
        echo "📋 === RÉSUMÉ DU DÉPLOIEMENT ==="
        echo "Namespaces créés:"
        kubectl get namespaces | grep -E "(database|web|mail|monitoring|dns)" || true
        echo ""
        echo "Services déployés:"
        kubectl get pods --all-namespaces | grep -v "kube-system\|default" || true
        echo ""
        echo "Services réseau:"
        kubectl get svc --all-namespaces | grep -v "kube-system\|default" || true

  # Job 4: Tests de Sécurité et Performance
  security-performance-tests:
    name: 🔒 Sécurité & Performance
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-charts]
    if: ${{ needs.detect-changes.outputs.charts != '' }}
    
    steps:
    - uses: actions/checkout@v4

    - name: ⚙️ Setup Helm
      uses: azure/setup-helm@v3

    - name: 🔒 Audit de Sécurité
      run: |
        echo "🔒 Audit de sécurité des configurations"
        
        # Vérification des secrets
        echo "🔍 Vérification des secrets..."
        for chart in bind9 database/mysql database/phpmyadmin mailserver monitoring/monitoring-chart roundcube web-apache web-nginx; do
          if [ -d "$chart" ]; then
            # Recherche de mots de passe en dur
            if grep -r "password.*:" "$chart/" --include="*.yaml" | grep -v "passwordSecretRef" | grep -v "# Example" | grep -v "description"; then
              echo "⚠️ $chart: Mots de passe potentiellement en dur"
            else
              echo "✅ $chart: Secrets correctement gérés"
            fi
          fi
        done
        
        # Vérification des ressources
        echo "🔍 Vérification des limites de ressources..."
        for chart in bind9 database/mysql database/phpmyadmin mailserver monitoring/monitoring-chart roundcube web-apache web-nginx; do
          if [ -d "$chart" ]; then
            if helm template test "$chart/" | grep -q "resources:"; then
              echo "✅ $chart: Limites de ressources définies"
            else
              echo "⚠️ $chart: Limites de ressources recommandées"
            fi
          fi
        done

    - name: 🛡️ Scan des vulnérabilités
      run: |
        echo "🛡️ Analyse des vulnérabilités des images"
        
        # Extraire les images des templates
        for chart in bind9 database/mysql database/phpmyadmin mailserver monitoring/monitoring-chart roundcube web-apache web-nginx; do
          if [ -d "$chart" ]; then
            echo "🔍 Images dans $chart:"
            helm template test "$chart/" | grep "image:" | sort | uniq || true
          fi
        done

  # Job 5: Notification et Documentation
  notification:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [integration-tests, security-performance-tests]
    if: always()
    
    steps:
    - name: 📊 Préparer le rapport
      run: |
        echo "📊 === RAPPORT DE DÉPLOIEMENT ===" > deployment_report.md
        echo "Date: $(date)" >> deployment_report.md
        echo "Branch: ${{ github.ref }}" >> deployment_report.md
        echo "Commit: ${{ github.sha }}" >> deployment_report.md
        echo "" >> deployment_report.md
        
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ Tests d'intégration: SUCCÈS" >> deployment_report.md
        else
          echo "❌ Tests d'intégration: ÉCHEC" >> deployment_report.md
        fi
        
        if [[ "${{ needs.security-performance-tests.result }}" == "success" ]]; then
          echo "✅ Tests de sécurité: SUCCÈS" >> deployment_report.md
        else
          echo "❌ Tests de sécurité: ÉCHEC" >> deployment_report.md
        fi
        
        echo "" >> deployment_report.md
        echo "🚀 Déploiement prêt pour la production!" >> deployment_report.md
        
        cat deployment_report.md

    - name: 📢 Résultat final
      run: |
        if [[ "${{ needs.integration-tests.result }}" == "success" && "${{ needs.security-performance-tests.result }}" == "success" ]]; then
          echo "🎉 SUCCÈS: Tous les tests sont passés - Prêt pour le déploiement en production!"
          echo "🔄 Les services peuvent être mis à jour sans interruption"
        else
          echo "❌ ÉCHEC: Certains tests ont échoué - Révision nécessaire avant déploiement"
          exit 1
