name: 🚀 CI Infrastructure Services

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'bind9/**'
      - 'database/**'
      - 'mailserver/**'
      - 'monitoring/**'
      - 'roundcube/**'
      - 'web-apache/**'
      - 'web-nginx/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'bind9/**'
      - 'database/**'
      - 'mailserver/**'
      - 'monitoring/**'
      - 'roundcube/**'
      - 'web-apache/**'
      - 'web-nginx/**'

env:
  REGISTRY: ghcr.io
  NAMESPACE_PREFIX: prod

jobs:
  # Job 1: Détection des services modifiés
  detect-changes:
    name: 🔍 Détection des Changements
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.changes.outputs.charts }}
      bind9: ${{ steps.changes.outputs.bind9 }}
      mysql: ${{ steps.changes.outputs.mysql }}
      phpmyadmin: ${{ steps.changes.outputs.phpmyadmin }}
      mailserver: ${{ steps.changes.outputs.mailserver }}
      monitoring: ${{ steps.changes.outputs.monitoring }}
      roundcube: ${{ steps.changes.outputs.roundcube }}
      web-apache: ${{ steps.changes.outputs.web-apache }}
      web-nginx: ${{ steps.changes.outputs.web-nginx }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Vérifier l'existence des dossiers
        run: |
          declare -A services=(
            [bind9]="bind9"
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [mailserver]="mailserver"
            [monitoring]="monitoring/monitoring-chart"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )
          for svc in "${!services[@]}"; do
            if [ ! -d "${services[$svc]}" ]; then
              echo "❌ Erreur : Dossier ${services[$svc]} manquant"
              exit 1
            fi
          done
          echo "✅ Tous les dossiers de charts existent"

      - name: 🔍 Détecter les changements par service
        id: changes
        run: |
          declare -A services=(
            [bind9]="bind9"
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [mailserver]="mailserver"
            [monitoring]="monitoring/monitoring-chart"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          charts_changed=()

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            diff_base="${{ github.base_ref }}"
          else
            diff_base="HEAD~1"
          fi

          for svc in "${!services[@]}"; do
            path="${services[$svc]}"
            if git diff --name-only "$diff_base" | grep -q "^${path}/"; then
              echo "$svc=true" >> $GITHUB_OUTPUT
              charts_changed+=("$svc")
              echo "✅ Changements détectés dans: $svc"
            else
              echo "$svc=false" >> $GITHUB_OUTPUT
              echo "⏸️ Aucun changement dans: $svc"
            fi
          done

          charts_json=$(printf '%s\n' "${charts_changed[@]}" | jq -R -s -c 'split("\n")[:-1]')
          echo "charts=${charts_json}" >> $GITHUB_OUTPUT
          echo "📋 Services à déployer: ${charts_changed[*]}"

  # Job 2: Validation des charts modifiés
  validate-charts:
    name: 🧪 Validation des Charts
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.charts != '[]' }}
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.charts) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 🔍 Validation du chart ${{ matrix.chart }}
        run: |
          declare -A paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring]="monitoring/monitoring-chart"
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          chart_path="${paths[${{ matrix.chart }}]}"
          echo "🔍 Validation de: $chart_path"
          helm lint "$chart_path"
          helm template "test-${{ matrix.chart }}" "$chart_path" --dry-run
          echo "✅ ${{ matrix.chart }} validé"

  # Job 3: Lint YAML Simple
  lint-yaml:
    name: 📏 Lint YAML
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.charts != '[]' }}
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.charts) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup yamllint
        run: sudo apt-get update && sudo apt-get install -y yamllint

      - name: ⚙️ Configuration yamllint souple
        run: |
          cat <<EOF > .yamllint.yaml
          extends: default
          rules:
            line-length:
              max: 120
            indentation:
              spaces: 2
            comments:
              min-spaces-from-content: 1
            truthy:
              allowed-values: ['true', 'false', 'yes', 'no']
          ignore: |
            *.tgz
            */templates/*.tpl
          EOF

      - name: 📏 Lint YAML pour ${{ matrix.chart }}
        run: |
          declare -A paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring]="monitoring/monitoring-chart"
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          chart_path="${paths[${{ matrix.chart }}]}"
          echo "📏 Lint YAML dans: $chart_path"
          if find "$chart_path" -name "*.yaml" | grep -q .; then
            find "$chart_path" -name "*.yaml" -exec yamllint -c .yamllint.yaml {} \; || echo "⚠️ Warnings YAML - continuer"
          else
            echo "⚠️ Aucun fichier YAML trouvé – skip"
          fi
          echo "✅ YAML lint terminé"

  # Job 4: Audit de Sécurité Simple
  security-audit:
    name: 🔒 Audit de Sécurité
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.charts != '[]' }}
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.charts) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: 🔒 Vérification des secrets pour ${{ matrix.chart }}
        run: |
          declare -A paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring]="monitoring/monitoring-chart"
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          chart_path="${paths[${{ matrix.chart }}]}"
          echo "🔒 Audit de sécurité: $chart_path"

          # Recherche de mots de passe en dur (souple)
          if grep -rE "password.*:.*[a-zA-Z0-9]" "$chart_path/" --include="*.yaml" --exclude="*.tpl" | grep -v "passwordSecretRef" | grep -v "#" | grep -v "example"; then
            echo "⚠️ Mots de passe potentiellement en dur - Vérifiez manuellement"
          else
            echo "✅ Pas de mots de passe en dur détectés"
          fi

          echo "✅ Audit sécurité terminé (mode test)"

  # Job 5: Package Charts (seulement sur main)
  package-charts:
    name: 📦 Package des Charts
    runs-on: ubuntu-latest
    needs: [validate-charts, lint-yaml, security-audit]
    if: ${{ needs.detect-changes.outputs.charts != '[]' && github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 📦 Package les charts modifiés
        run: |
          declare -A paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring]="monitoring/monitoring-chart"
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          mkdir -p artifacts
          for chart in $(echo ${{ needs.detect-changes.outputs.charts }} | jq -r '.[]'); do
            chart_path="${paths[$chart]}"
            helm package "$chart_path" --destination artifacts/
            echo "📦 $chart packagé"
          done

      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: artifacts/*.tgz

  # Job 6: Notification Simple
  notification:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [validate-charts, lint-yaml, security-audit, package-charts]
    if: always()
    steps:
      - name: 📊 Rapport Final
        run: |
          echo "📊 === RAPPORT CI ===" 
          echo "Date: $(date)"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          
          if [[ "${{ needs.validate-charts.result }}" == "success" ]]; then
            echo "✅ Validation Charts: SUCCÈS"
          else
            echo "❌ Validation Charts: ÉCHEC"
          fi
          
          if [[ "${{ needs.lint-yaml.result }}" == "success" ]]; then
            echo "✅ Lint YAML: SUCCÈS"
          else
            echo "❌ Lint YAML: ÉCHEC"
          fi
          
          if [[ "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "✅ Audit Sécurité: SUCCÈS"
          else
            echo "❌ Audit Sécurité: ÉCHEC"
          fi
          
          if [[ "${{ needs.package-charts.result }}" == "success" || "${{ needs.package-charts.result }}" == "skipped" ]]; then
            echo "✅ Packaging: OK"
          else
            echo "❌ Packaging: ÉCHEC"
          fi
          
          echo ""
          echo "🚀 CI terminé pour environnement de test local!"

      - name: 📢 Résultat final
        run: |
          # Mode souple pour tests locaux - ne pas faire échouer sur warnings
          if [[ "${{ needs.validate-charts.result }}" == "success" ]]; then
            echo "🎉 SUCCÈS: Charts validés - Prêt pour tests locaux!"
          else
            echo "❌ ÉCHEC: Révision nécessaire avant déploiement"
            exit 1
          fi
