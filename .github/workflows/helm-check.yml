name: 🚀 CI Helm Charts

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'web-nginx/**'
      - 'monitoring/**'
      - 'web-apache/**'
      - 'bind9/**'
      - 'database/**'
      - 'mailserver/**'
      - 'roundcube/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'web-nginx/**'
      - 'monitoring/**'
      - 'web-apache/**'
      - 'bind9/**'
      - 'database/**'
      - 'mailserver/**'
      - 'roundcube/**'

jobs:
  detect-changes:
    name: 🔍 Détection des Changements
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.set-changes.outputs.charts }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Analyser les fichiers modifiés
        id: set-changes
        run: |
          services=("bind9" "database/mysql" "database/phpmyadmin" "mailserver" "monitoring/monitoring-chart" "roundcube" "web-apache" "web-nginx")
          modified=()

          for chart in "${services[@]}"; do
            if git diff --name-only origin/main...HEAD | grep -q "^${chart}/"; then
              name=$(basename "$chart")   # ex: monitoring/monitoring-chart -> monitoring-chart
              modified+=("$name")
              echo "✅ $chart modifié (clé: $name)"
            else
              echo "⏸️ Aucun changement dans $chart"
            fi
          done

          # Construit un JSON propre et supprime les éléments vides
          json=$(
            printf '%s\n' "${modified[@]}" \
            | jq -R -s -c 'split("\n") | map(select(length>0))'
          )

          echo "charts=$json" >> $GITHUB_OUTPUT
          echo "📋 Charts modifiés : $json"

  validate-charts:
    name: 🧪 Validation Helm Charts
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.charts != '[]' }}
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.charts) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Installer Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: ⚙️ Installer yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint jq

      - name: 🔍 Validation de ${{ matrix.chart }}
        shell: bash
        run: |
          set -euo pipefail

          declare -A chart_paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring-chart]="monitoring/monitoring-chart"   # ✅ clé alignée
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          chart="${{ matrix.chart }}"
          if [[ -z "${chart:-}" ]]; then
            echo "⏭️ Chart vide dans la matrice, on saute proprement."
            exit 0
          fi

          path="${chart_paths[$chart]:-}"
          if [[ -z "${path:-}" ]]; then
            echo "❌ Clé inconnue '$chart' dans chart_paths. Vérifie detect-changes et chart_paths."
            echo "🔎 chart_paths disponibles: ${!chart_paths[*]}"
            exit 1
          fi

          if [[ ! -f "$path/Chart.yaml" ]]; then
            echo "❌ Chart.yaml introuvable pour '$chart' (path: $path)"
            exit 1
          fi

          echo "📦 Analyse de $chart (chemin: $path)"

          echo "🔍 helm lint"
          helm lint "$path"

          echo "🧪 helm template dry-run"
          helm template "test-$chart" "$path" --dry-run

          echo "📄 Vérification syntaxe YAML"
          yamllint "$path"

          echo "🔒 Vérification des secrets en dur"
          if grep -rE "password.*:" "$path" --include="*.yaml" | grep -vE "passwordSecretRef|#|description"; then
            echo "⚠️ Mot de passe trouvé en dur"
          else
            echo "✅ Aucun secret en dur détecté"
          fi

          echo "📐 Vérification des ressources"
          if helm template "test-$chart" "$path" | grep -q "resources:"; then
            echo "✅ Ressources CPU/memory définies"
          else
            echo "⚠️ Ressources non définies"
          fi

          echo "📦 Vérification des images Docker"
          images=$(helm template "test-$chart" "$path" | grep -E "^\s*image:\s*" | awk '{print $2}' | sort -u || true)
          for img in $images; do
            if [[ "$img" == *":latest" || "$img" != *:* ]]; then
              echo "⚠️ Image non taggée ou utilisant latest : $img"
            else
              echo "✅ Image OK : $img"
            fi
          done

          echo "🏷️ Vérification des labels Kubernetes"
          if helm template "test-$chart" "$path" | grep -qE "app.kubernetes.io/(name|version|managed-by):"; then
            echo "✅ Labels présents"
          else
            echo "⚠️ Labels Kubernetes manquants"
          fi

          echo "🔄 Dépendances Helm (si présentes)"
          helm dependency update "$path" || true
          helm dependency list "$path" || true
