name: 🚀 CI Infrastructure Services

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'bind9/**'
      - 'database/**'
      - 'mailserver/**'
      - 'monitoring/**'
      - 'roundcube/**'
      - 'web-apache/**'
      - 'web-nginx/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'bind9/**'
      - 'database/**'
      - 'mailserver/**'
      - 'monitoring/**'
      - 'roundcube/**'
      - 'web-apache/**'
      - 'web-nginx/**'

env:
  REGISTRY: ghcr.io
  NAMESPACE_PREFIX: prod

jobs:
  # Job 1: Détection des services modifiés
  detect-changes:
    name: 🔍 Détection des Changements
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.changes.outputs.charts }}
      bind9: ${{ steps.changes.outputs.bind9 }}
      mysql: ${{ steps.changes.outputs.mysql }}
      phpmyadmin: ${{ steps.changes.outputs.phpmyadmin }}
      mailserver: ${{ steps.changes.outputs.mailserver }}
      monitoring: ${{ steps.changes.outputs.monitoring }}
      roundcube: ${{ steps.changes.outputs.roundcube }}
      web-apache: ${{ steps.changes.outputs.web-apache }}
      web-nginx: ${{ steps.changes.outputs.web-nginx }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Détecter les changements par service
        id: changes
        run: |
          declare -A services=(
            [bind9]="bind9"
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [mailserver]="mailserver"
            [monitoring]="monitoring/monitoring-chart"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          charts_changed=()

          # Utiliser une comparaison adaptée aux PR et push
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            diff_base="${{ github.base_ref }}"
          else
            diff_base="HEAD~1"
          fi

          for svc in "${!services[@]}"; do
            path="${services[$svc]}"
            if git diff --name-only "$diff_base" | grep -q "^${path}/"; then
              echo "$svc=true" >> $GITHUB_OUTPUT
              charts_changed+=("$svc")
              echo "✅ Changements détectés dans: $svc"
            else
              echo "$svc=false" >> $GITHUB_OUTPUT
              echo "⏸️ Aucun changement dans: $svc"
            fi
          done

          # Exporter la liste JSON pour matrice
          charts_json=$(printf '%s\n' "${charts_changed[@]}" | jq -R -s -c 'split("\n")[:-1]')
          echo "charts=${charts_json}" >> $GITHUB_OUTPUT
          echo "📋 Services à déployer: ${charts_changed[*]}"

  # Job 2: Validation des charts modifiés
  validate-charts:
    name: 🧪 Validation des Charts
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.charts != '[]' }}
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.charts) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 🔍 Validation du chart ${{ matrix.chart }}
        run: |
          declare -A paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring]="monitoring/monitoring-chart"
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          chart_path="${paths[${{ matrix.chart }}]}"
          echo "🔍 Validation de: $chart_path"
          helm lint "$chart_path" --strict
          helm template "test-${{ matrix.chart }}" "$chart_path" --dry-run
          echo "✅ ${{ matrix.chart }} validé"

  # Job 3: Lint YAML et Kubernetes (Ajout pour CI renforcée)
  lint-yaml-k8s:
    name: 📏 Lint YAML & K8s
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.charts != '[]' }}
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.charts) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup yamllint
        run: sudo apt-get update && sudo apt-get install -y yamllint

      - name: ⚙️ Setup kube-linter
        run: |
          curl -L https://github.com/stackrox/kube-linter/releases/download/v0.6.4/kube-linter-linux-amd64.tar.gz | tar xz
          sudo mv kube-linter /usr/local/bin/

      - name: 📏 Lint YAML pour ${{ matrix.chart }}
        run: |
          declare -A paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring]="monitoring/monitoring-chart"
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          chart_path="${paths[${{ matrix.chart }}]}"
          echo "📏 Lint YAML dans: $chart_path"
          find "$chart_path" -name "*.yaml" -exec yamllint {} \;
          echo "✅ YAML lint passé"

      - name: 🔒 Lint Kubernetes pour ${{ matrix.chart }}
        run: |
          declare -A paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring]="monitoring/monitoring-chart"
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          chart_path="${paths[${{ matrix.chart }}]}"
          echo "🔒 Lint K8s dans: $chart_path"
          helm template "test-${{ matrix.chart }}" "$chart_path" | kube-linter lint -
          echo "✅ K8s lint passé"

  # Job 4: Audit de Sécurité (Simplifié pour CI, sans déploiement)
  security-audit:
    name: 🔒 Audit de Sécurité
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.charts != '[]' }}
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.charts) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 🔒 Vérification des secrets et ressources pour ${{ matrix.chart }}
        run: |
          declare -A paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring]="monitoring/monitoring-chart"
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          chart_path="${paths[${{ matrix.chart }}]}"
          echo "🔒 Audit de: $chart_path"

          # Vérification des mots de passe en dur
          if grep -rE "password.*:.*[a-zA-Z0-9]" "$chart_path/" --include="*.yaml" --exclude="*.tpl" | grep -v "passwordSecretRef" | grep -v "#"; then
            echo "⚠️ Mots de passe potentiellement en dur détectés"
            exit 1
          else
            echo "✅ Pas de mots de passe en dur"
          fi

          # Vérification des limites de ressources
          if helm template "test-${{ matrix.chart }}" "$chart_path" | grep -q "resources:"; then
            echo "✅ Limites de ressources définies"
          else
            echo "⚠️ Limites de ressources manquantes"
            exit 1
          fi

  # Job 5: Package Charts (Ajout pour CI : Packaging pour futur déploiement)
  package-charts:
    name: 📦 Package des Charts
    runs-on: ubuntu-latest
    needs: [validate-charts, lint-yaml-k8s, security-audit]
    if: ${{ needs.detect-changes.outputs.charts != '[]' && github.ref == 'refs/heads/main' }}  # Seulement sur main pour simuler une release CI
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 📦 Package les charts modifiés
        run: |
          declare -A paths=(
            [mysql]="database/mysql"
            [phpmyadmin]="database/phpmyadmin"
            [monitoring]="monitoring/monitoring-chart"
            [bind9]="bind9"
            [mailserver]="mailserver"
            [roundcube]="roundcube"
            [web-apache]="web-apache"
            [web-nginx]="web-nginx"
          )

          for chart in $(echo ${{ needs.detect-changes.outputs.charts }} | jq -r '.[]'); do
            chart_path="${paths[$chart]}"
            helm package "$chart_path" --destination artifacts/
            echo "📦 $chart packagé"
          done

      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: helm-charts
          path: artifacts/*.tgz

  # Job 6: Notification (Simplifiée pour CI)
  notification:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [validate-charts, lint-yaml-k8s, security-audit, package-charts]
    if: always()
    steps:
      - name: 📊 Préparer le rapport
        run: |
          echo "📊 === RAPPORT CI ===" > ci_report.md
          echo "Date: $(date)" >> ci_report.md
          echo "Branch: ${{ github.ref }}" >> ci_report.md
          echo "Commit: ${{ github.sha }}" >> ci_report.md
          echo "" >> ci_report.md
          
          if [[ "${{ needs.validate-charts.result }}" == "success" ]]; then
            echo "✅ Validation Charts: SUCCÈS" >> ci_report.md
          else
            echo "❌ Validation Charts: ÉCHEC" >> ci_report.md
          fi
          
          if [[ "${{ needs.lint-yaml-k8s.result }}" == "success" ]]; then
            echo "✅ Lint YAML/K8s: SUCCÈS" >> ci_report.md
          else
            echo "❌ Lint YAML/K8s: ÉCHEC" >> ci_report.md
          fi
          
          if [[ "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "✅ Audit Sécurité: SUCCÈS" >> ci_report.md
          else
            echo "❌ Audit Sécurité: ÉCHEC" >> ci_report.md
          fi
          
          if [[ "${{ needs.package-charts.result }}" == "success" ]]; then
            echo "✅ Packaging: SUCCÈS" >> ci_report.md
          else
            echo "❌ Packaging: ÉCHEC (ou non lancé)" >> ci_report.md
          fi
          
          echo "" >> ci_report.md
          echo "🚀 CI terminé - Prêt pour revue!" >> ci_report.md
          
          cat ci_report.md

      - name: 📢 Résultat final
        run: |
          if [[ "${{ needs.validate-charts.result }}" == "success" && "${{ needs.lint-yaml-k8s.result }}" == "success" && "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "🎉 SUCCÈS: Tous les checks CI sont passés!"
          else
            echo "❌ ÉCHEC: Certains checks ont échoué - Révision nécessaire"
            exit 1
          fi
