---
- name: Deploy Helm Charts to Minikube
  hosts: localhost
  vars:
    charts:
      - name: mysql
        path: ../database/mysql
        namespace: mysql
      - name: phpmyadmin
        path: ../database/phpmyadmin
        namespace: phpmyadmin
      - name: monitoring
        path: ../monitoring/monitoring-chart
        namespace: monitoring
      - name: web-apache
        path: ../web-apache
        namespace: web-apache
      - name: web-nginx
        path: ../web-nginx
        namespace: web-nginx
      - name: unbound
        path: ../unbound
        namespace: unbound
      - name: email
        path: ../email
        namespace: email-stack
      - name: bind9
        path: ../bind9
        namespace: bind9
  tasks:
    - name: Check Minikube status
      command: minikube status
      register: minikube_status
      changed_when: false
      failed_when: "'host: Running' not in minikube_status.stdout"

    - name: Set Minikube Docker environment
      shell: |
        source <(minikube docker-env)
      args:
        executable: /bin/bash
      changed_when: false

    - name: Create namespaces
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ item.namespace }}"
        state: present
        definition:
          metadata:
            labels:
              app.kubernetes.io/managed-by: Helm
            annotations:
              meta.helm.sh/release-name: "{{ item.name }}"
              meta.helm.sh/release-namespace: "{{ item.namespace }}"
      loop: "{{ charts }}"

    - name: Deploy Helm charts
      kubernetes.core.helm:
        name: "{{ item.name }}"
        chart_ref: "{{ item.path }}"
        namespace: "{{ item.namespace }}"
        state: present
        create_namespace: true
      loop: "{{ charts }}"

    - name: Verify deployments
      command: kubectl get pods --namespace {{ item.namespace }}
      loop: "{{ charts }}"
      register: pod_status
      changed_when: false

    - name: Display pod status
      debug:
        msg: "{{ item.stdout_lines }}"
      loop: "{{ pod_status.results }}"
