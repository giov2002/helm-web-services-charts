apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "monitoring.fullname" . }}-unbound-exporter-script
  labels:
    {{- include "monitoring.labels" . | nindent 4 }}
data:
  unbound_exporter.py: |
    #!/usr/bin/env python3
    import time
    import subprocess
    import re
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import threading
    
    class UnboundMetrics:
        def __init__(self):
            self.metrics = {}
            self.unbound_host = "{{ .Values.unboundExporter.unboundHost }}"
            
        def collect_metrics(self):
            try:
                # Simple test DNS pour vérifier qu'Unbound fonctionne
                result = subprocess.run(['nslookup', 'google.com', self.unbound_host], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    self.metrics['unbound_up'] = 1
                    self.metrics['unbound_query_time'] = 0.1  # Temps approximatif
                else:
                    self.metrics['unbound_up'] = 0
            except:
                self.metrics['unbound_up'] = 0
                
            # Métriques de base simulées (en attendant une vraie connexion unbound-control)
            self.metrics['unbound_queries_total'] = time.time() % 10000
            self.metrics['unbound_cache_hits_total'] = time.time() % 5000
            
        def format_metrics(self):
            output = "# HELP unbound_up Whether Unbound is responding to queries\n"
            output += "# TYPE unbound_up gauge\n"
            output += f"unbound_up {self.metrics.get('unbound_up', 0)}\n"
            
            output += "# HELP unbound_queries_total Total number of queries\n"
            output += "# TYPE unbound_queries_total counter\n"
            output += f"unbound_queries_total {self.metrics.get('unbound_queries_total', 0)}\n"
            
            output += "# HELP unbound_cache_hits_total Total cache hits\n"
            output += "# TYPE unbound_cache_hits_total counter\n"
            output += f"unbound_cache_hits_total {self.metrics.get('unbound_cache_hits_total', 0)}\n"
            
            return output
    
    metrics_collector = UnboundMetrics()
    
    class MetricsHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/metrics':
                metrics_collector.collect_metrics()
                response = metrics_collector.format_metrics()
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(response.encode())
            else:
                self.send_response(404)
                self.end_headers()
    
    def update_metrics():
        while True:
            metrics_collector.collect_metrics()
            time.sleep(30)
    
    if __name__ == '__main__':
        # Démarrer le thread de collecte des métriques
        metrics_thread = threading.Thread(target=update_metrics, daemon=True)
        metrics_thread.start()
        
        # Démarrer le serveur HTTP
        server = HTTPServer(('0.0.0.0', 9167), MetricsHandler)
        print("Unbound exporter starting on port 9167...")
        server.serve_forever()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "monitoring.fullname" . }}-unbound-exporter
  labels:
    {{- include "monitoring.labels" . | nindent 4 }}
    app.kubernetes.io/component: unbound-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: unbound-exporter
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: unbound-exporter
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: unbound-exporter
        image: python:3.9-alpine
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: 
          - -c
          - |
            apk add --no-cache bind-tools
            python3 /app/unbound_exporter.py
        ports:
        - name: metrics
          containerPort: 9167
          protocol: TCP
        env:
        - name: UNBOUND_HOST
          value: "{{ .Values.unboundExporter.unboundHost }}"
        volumeMounts:
        - name: exporter-script
          mountPath: /app
        resources:
          {{- toYaml .Values.unboundExporter.resources | nindent 12 }}
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9167
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9167
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: exporter-script
        configMap:
          name: {{ include "monitoring.fullname" . }}-unbound-exporter-script
          defaultMode: 0755